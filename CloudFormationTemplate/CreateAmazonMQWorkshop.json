{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation template to launch resources for the Amazon MQ workshop.",
  
  "Parameters": {
    "CIDR": {
      "Description": "CIDR block, from which the access to the EC2 instance is allowed.",
      "Type": "String",
      "Default": "0.0.0.0/0",
      "MinLength": 1,
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "The CIDR block is required!"
    },
    "AmazonMQBrokerUser": {
      "Description": "The user to access the Amazon MQ broker.",
      "Type": "String",
      "Default": "workshopUser",
      "MinLength": 2,
      "ConstraintDescription": "The Amazon MQ broker user is required !"
    },
    "AmazonMQBrokerPassword": {
      "Description": "The password to access the Amazon MQ broker. Min 12 characters",
      "Type": "String",
      "MinLength": 12,
      "ConstraintDescription": "The Amazon MQ broker password is required !",
      "NoEcho": true
    },
    "AMI": {
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
    }
  },

  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.42.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "VPC"
                ]
              ]
            }
          }
        ]
      }
    },
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "InternetGateway"
                ]
              ]
            }
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },
    "RouteTable": {
       "Type": "AWS::EC2::RouteTable",
       "Properties": {
          "VpcId" : {"Ref" : "VPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "RouteTable"
                ]
              ]
            }
          }
        ]
      }
    },
    "Route": {
       "Type": "AWS::EC2::Route",
       "DependsOn": "AttachGateway",
       "Properties": {
          "RouteTableId": { "Ref" : "RouteTable" },
          "DestinationCidrBlock": "0.0.0.0/0",
          "GatewayId": { "Ref" : "InternetGateway" }
       }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.42.0.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "PublicSubnet1"
                ]
              ]
            }
          }
        ]
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.42.1.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "PublicSubnet2"
                ]
              ]
            }
          }
        ]
      }
    },
    "PublicSubnet1RouteTableAssociation": {
       "Type": "AWS::EC2::SubnetRouteTableAssociation",
       "Properties": {
          "SubnetId": { "Ref" : "PublicSubnet1" },
          "RouteTableId": { "Ref" : "RouteTable" }
       }
    },
    "PublicSubnet2RouteTableAssociation": {
       "Type": "AWS::EC2::SubnetRouteTableAssociation",
       "Properties": {
          "SubnetId": { "Ref" : "PublicSubnet2" },
          "RouteTableId": { "Ref" : "RouteTable" }
       }
    },
    "EC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Limits security group ingress and egress traffic for the EC2 instance",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "Description": "SSH access",
            "CidrIp": { "Ref": "CIDR" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 8180,
            "ToPort": 8180,
            "Description": "C9 access",
            "CidrIp": { "Ref": "CIDR" }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "EC2SecurityGroup"
                ]
              ]
            }
          }
        ]
      }
    },
    "AmazonMQSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Limits security group ingress and egress traffic for the Amazon MQ instance",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 8162,
            "ToPort": 8162,
            "CidrIp": { "Ref": "CIDR" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 61617,
            "ToPort": 61617,
            "SourceSecurityGroupId" : { "Ref": "EC2SecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 5671,
            "ToPort": 5671,
            "SourceSecurityGroupId" : { "Ref": "EC2SecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 61614,
            "ToPort": 61614,
            "SourceSecurityGroupId" : { "Ref": "EC2SecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 8883,
            "ToPort": 8883,
            "SourceSecurityGroupId" : { "Ref": "EC2SecurityGroup" }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "AmazonMQSecurityGroup"
                ]
              ]
            }
          }
        ]
      }
    },

    "AmazonMQBroker": {
      "Type": "AWS::AmazonMQ::Broker",
      "Properties": {
        "BrokerName": { 
          "Fn::Join": [ 
            "-", 
            [
              { "Ref": "AWS::StackName" },
              "Broker"
            ]
          ]
        },
        "EngineType": "ActiveMQ",
        "EngineVersion": "5.15.0",
        "HostInstanceType": "mq.t2.micro",
        "DeploymentMode": "ACTIVE_STANDBY_MULTI_AZ",
        "PubliclyAccessible": true,
        "AutoMinorVersionUpgrade": false,
        "SecurityGroups": [{ "Ref": "AmazonMQSecurityGroup" }],
        "SubnetIds": [{ "Ref": "PublicSubnet1" }, { "Ref": "PublicSubnet2" }],
        "Logs": {
          "Audit" : true,
          "General" : true
        },
        "Users": [{
          "ConsoleAccess" : true,
          "Groups" : [ "admin" ],
          "Username" : { "Ref" : "AmazonMQBrokerUser" },
          "Password" : { "Ref" : "AmazonMQBrokerPassword" }
        }]
      }
    },
    "EC2InstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [
          {
            "Ref" : "GetECRTokenRole"
          }
        ]
      }
    },
    "GetECRTokenPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "GetECRTokenPolicy",
        "PolicyDocument" : {
          "Statement" : [
            {
              "Effect" : "Allow",
              "Action" : [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage"
              ],
              "Resource" : "*"
            }
          ]
        },
        "Roles" : [
          {
            "Ref" : "GetECRTokenRole"
          }
        ]
      }
    },
    "GetECRTokenRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement" : [
            {
              "Effect" : "Allow",
              "Principal" : {
                "Service" : ["ec2.amazonaws.com"]
              },
              "Action" : [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path" : "/"
      }
    },
    "EC2Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : { "Ref": "AMI" },
        "InstanceType": "t2.micro",
        "IamInstanceProfile": { "Ref": "EC2InstanceProfile" },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": true,
            "DeviceIndex": "0",
            "GroupSet": [{ "Ref" : "EC2SecurityGroup" }],
            "SubnetId": { "Ref" : "PublicSubnet1" }
          }
        ],
        "UserData": { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "echo '/opt/aws/bin/cfn-signal --success true",
          "  --stack ", { "Ref": "AWS::StackName" },
          "  --resource EC2Instance" ,
          "  --region ", { "Ref" : "AWS::Region" },
          "' > signal.txt \n",
          "echo 'Downloading and executing main script'\n",
          "wget https://s3.amazonaws.com/amazon-mq-workshop/ec2-script-c9-docker.sh\n",
          "chmod +x /ec2-script-c9-docker.sh\n",
          "sudo -u ec2-user /ec2-script-c9-docker.sh ",{ "Ref": "AmazonMQBrokerUser" },
          " ", { "Ref" : "AmazonMQBrokerPassword" }, "\n",
          "echo 'Completed main script install'\n"
        ]]}},
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "AmazonMQWorkshopClient"
                ]
              ]
            }
          }
        ]
      },
      "CreationPolicy": {
          "ResourceSignal": {
            "Count": 1,
            "Timeout": "PT20M"
          }
      }
    }
  },
  "Outputs": {
    "EC2IP": {
      "Value": { "Fn::GetAtt": ["EC2Instance", "PublicIp"]},
      "Description": "The IP address of your EC2 instance"
    },
    "Cloud9ConsoleURL": {
        "Value": {"Fn::Join": ["", ["http://", { "Fn::GetAtt": ["EC2Instance", "PublicIp"]}, ":8180/"]]},
        "Description": "The URL for the Cloud9 console"
      }
  }
}
