AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to launch resources for the Amazon MQ workshop.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Configuration
        Parameters:
          - CIDR
      - Label:
          default: Broker Configuration
        Parameters:
          - AmazonMQBrokerUser
          - AmazonMQBrokerPassword
    ParameterLabels:
      AmazonMQBrokerUser:
        default: Broker Username
      AmazonMQBrokerPassword:
        default: Broker Password
      
Parameters:
  Stage:
    Type: String
    Default: DEV
    Description: The stage into we deploy this template.
  CIDR:
    Description: CIDR block, from which the access to the EC2 instance is allowed.
    Type: String
    # Using the same CIDR block as the VPC for the Cloud9 instance
    Default: '0.0.0.0/0'
    MinLength: 1
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: The CIDR block is required!
  AmazonMQBrokerUser:
    Description: The user to access the Amazon MQ broker.
    Type: String
    Default: workshopUser
    MinLength: 2
    ConstraintDescription: The Amazon MQ broker user is required !
  AmazonMQBrokerPassword:
    Description: The password to access the Amazon MQ broker. Min 12 characters
    Type: String
    Default: workshopUser
    MinLength: 12
    ConstraintDescription: The Amazon MQ broker password is required !
    NoEcho: true
  IBMMQBrokerPassword:
    NoEcho: true
    Type: String
    Default: passw0rd
    Description: The password of the IBM MQ application user.
  IBMMQBrokerQueueManager:
    Type: String
    Default: QMGR
    Description: The IBM MQ broker queue manager name.

Resources:
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ECSTaskRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
                - kms:Decrypt
              Resource: '*'

  ServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: fargate-service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: '*'

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.42.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - RouteTable
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'RouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.42.0.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - PublicSubnet1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.42.1.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - PublicSubnet2
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.42.2.0/24
      AvailabilityZone: !Select
        - '2'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - PublicSubnet3
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      RouteTableId: !Ref 'RouteTable'
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2'
      RouteTableId: !Ref 'RouteTable'
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet3'
      RouteTableId: !Ref 'RouteTable'
  AmazonMQSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Limits security group ingress and egress traffic for the Amazon
        MQ instance
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8162
          ToPort: 8162
          CidrIp: !Ref 'CIDR'
        - IpProtocol: tcp
          FromPort: 61617
          ToPort: 61617
          CidrIp: !Ref 'CIDR'
        - IpProtocol: tcp
          FromPort: 5671
          ToPort: 5671
          CidrIp: !Ref 'CIDR'
        - IpProtocol: tcp
          FromPort: 61614
          ToPort: 61614
          CidrIp: !Ref 'CIDR'
        - IpProtocol: tcp
          FromPort: 8883
          ToPort: 8883
          CidrIp: !Ref 'CIDR'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - AmazonMQSecurityGroup
  JmsBridgeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Limits security group ingress and egress traffic for the JMS bridge
      VpcId: !Ref VPC
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 8162
        ToPort: 8162
        DestinationSecurityGroupId: !Ref IBMMQSecurityGroup
  IBMMQSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Limits security group ingress and egress traffic for the WebSphere MQ instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 9443
        ToPort: 9443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 1414
        ToPort: 1414
        CidrIp: 0.0.0.0/0
  AmazonMQBrokerLarge:
    Type: AWS::AmazonMQ::Broker
    DependsOn: AttachGateway
    Properties:
      BrokerName: Broker
      EngineType: ActiveMQ
      EngineVersion: 5.18
      HostInstanceType: mq.m5.large
      DeploymentMode: ACTIVE_STANDBY_MULTI_AZ
      PubliclyAccessible: true
      AutoMinorVersionUpgrade: true
      SecurityGroups:
        - !Ref 'AmazonMQSecurityGroup'
      SubnetIds:
        - !Ref 'PublicSubnet1'
        - !Ref 'PublicSubnet2'
      Logs:
        Audit: true
        General: true
      Users:
        - ConsoleAccess: true
          Groups:
            - admin
          Username: !Ref 'AmazonMQBrokerUser'
          Password: !Ref 'AmazonMQBrokerPassword'
  Broker1:
    Properties:
      BrokerName: NoB1
      DeploymentMode: ACTIVE_STANDBY_MULTI_AZ
      EngineType: ACTIVEMQ
      EngineVersion: 5.18
      HostInstanceType: mq.t3.micro
      Logs:
        Audit: true
        General: true
      PubliclyAccessible: true
      AutoMinorVersionUpgrade: true
      SecurityGroups:
        - !Ref 'AmazonMQSecurityGroup'
      SubnetIds:
        - !Ref 'PublicSubnet1'
        - !Ref 'PublicSubnet2'
      Users:
        - ConsoleAccess: true
          Groups:
            - admin
          Username: !Ref 'AmazonMQBrokerUser'
          Password: !Ref 'AmazonMQBrokerPassword'
    Type: AWS::AmazonMQ::Broker
    DependsOn: AttachGateway
  Broker2:
    Properties:
      BrokerName: NoB2
      DeploymentMode: ACTIVE_STANDBY_MULTI_AZ
      EngineType: ACTIVEMQ
      EngineVersion: 5.18
      HostInstanceType: mq.t3.micro
      Logs:
        Audit: true
        General: true
      PubliclyAccessible: true
      AutoMinorVersionUpgrade: true
      SecurityGroups:
        - !Ref 'AmazonMQSecurityGroup'
      SubnetIds:
        - !Ref 'PublicSubnet2'
        - !Ref 'PublicSubnet3'
      Users:
        - ConsoleAccess: true
          Groups:
            - admin
          Username: !Ref 'AmazonMQBrokerUser'
          Password: !Ref 'AmazonMQBrokerPassword'
    Type: AWS::AmazonMQ::Broker
    DependsOn: AttachGateway
  Broker3:
    Properties:
      BrokerName: NoB3
      DeploymentMode: ACTIVE_STANDBY_MULTI_AZ
      EngineType: ACTIVEMQ
      EngineVersion: 5.18
      HostInstanceType: mq.t3.micro
      Logs:
        Audit: true
        General: true
      PubliclyAccessible: true
      AutoMinorVersionUpgrade: true
      SecurityGroups:
        - !Ref 'AmazonMQSecurityGroup'
      SubnetIds:
        - !Ref 'PublicSubnet1'
        - !Ref 'PublicSubnet3'
      Users:
        - ConsoleAccess: true
          Groups:
            - admin
          Username: !Ref 'AmazonMQBrokerUser'
          Password: !Ref 'AmazonMQBrokerPassword'
    Type: AWS::AmazonMQ::Broker
    DependsOn: AttachGateway
  AmazonMQBrokerMigration:
    Type: AWS::AmazonMQ::Broker
    Properties: 
      BrokerName: AmazonMQBrokerMigration
      DeploymentMode: SINGLE_INSTANCE
      EngineType: ActiveMQ
      EngineVersion: 5.18
      HostInstanceType: mq.m5.large
      Logs:
        General: true
        Audit: true
      PubliclyAccessible: true
      SecurityGroups:
        - !Ref AmazonMQSecurityGroup
      SubnetIds:
        - !Ref PublicSubnet1
      Users: 
        - ConsoleAccess: true
          Groups: 
            - admin
          Username: !Ref 'AmazonMQBrokerUser'
          Password: !Ref 'AmazonMQBrokerPassword'
  Configuration1:
    Properties:
      Data:
        Fn::Base64:
          Fn::Join:
          - ''
          - - |-
              <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
              <broker xmlns="http://activemq.apache.org/schema/core"
                      schedulePeriodForDestinationPurge="10000"
                      start="false">
                <!--
                A configuration contains all of the settings for your ActiveMQ broker, in XML format (similar to ActiveMQ's activemq.xml file).
                You can create a configuration before creating any brokers. You can then apply the configuration to one or more brokers.

                You can use additional attributes for the broker element above. These attributes allow you to configure broker-wide settings.

                For more information, see Configuration and Amazon MQ Broker Configuration Parameters in the Amazon MQ Developer Guide:
                https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/amazon-mq-broker-configuration-parameters.html
                -->
                <!--
                Mirrored queues let you send a copy of each message to a topic with a similar name automatically.
                For more information, see http://activemq.apache.org/mirrored-queues.html

                Virtual destinations let you configure advanced routing of messages between destinations.
                For more information, see http://activemq.apache.org/virtual-destinations.html
                -->
                <!--
                <destinationInterceptors>
                  <mirroredQueue copyMessage="true" postfix=".qmirror" prefix=""/>
                  <virtualDestinationInterceptor>
                    <virtualDestinations>
                      <virtualTopic name="&gt;" prefix="VirtualTopicConsumers.*." selectorAware="false"/>
                      <compositeQueue name="MY.QUEUE">
                        <forwardTo>
                          <queue physicalName="FOO"/>
                          <topic physicalName="BAR"/>
                        </forwardTo>
                      </compositeQueue>
                    </virtualDestinations>
                  </virtualDestinationInterceptor>
                </destinationInterceptors>
                -->
                <!--
                By default, Amazon MQ optimizes for queues with fast consumers:
                Consumers are considered fast if they are able to keep up with the rate of messages generated by producers.
                Consumers are considered slow if a queue builds up a backlog of unacknowledged messages, potentially causing a decrease in producer throughput.
                To instruct Amazon MQ to optimize for queues with slow consumers, set the concurrentStoreAndDispatchQueues attribute to false.
                For more information, see https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/ensuring-effective-amazon-mq-performance.html
                -->
                <!--
                <persistenceAdapter>
                  <kahaDB  concurrentStoreAndDispatchQueues="false"/>
                </persistenceAdapter>
                -->
                <destinationPolicy>
                    <policyMap>
                       <policyEntries>
                      <!--
                      gcInactiveDestinations is used to automatically purge inactive destinations
                      preventing them from unnecessarily using broker resources.

                      An 'inactive' destination is one that has no messages pending and no consumers connected.

                      For more information, see: http://activemq.apache.org/delete-inactive-destinations.html
                      -->
                          <policyEntry gcInactiveDestinations="true"
                                       inactiveTimoutBeforeGC="600000"
                                       topic="&gt;">
                        <!--
                        The constantPendingMessageLimitStrategy is used to prevent
                        slow topic consumers to block producers and affect other consumers
                        by limiting the number of messages that are retained

                        For more information, see: http://activemq.apache.org/slow-consumer-handling.html
                        -->
                             <pendingMessageLimitStrategy>
                                <constantPendingMessageLimitStrategy limit="1000"/>
                             </pendingMessageLimitStrategy>
                          </policyEntry>
                          <policyEntry gcInactiveDestinations="true"
                                       inactiveTimoutBeforeGC="600000"
                                       queue="&gt;"/>
                          <!--
                      Destination policies let you configure a rich set of behaviors for your queues and topics.
                      For more information, see http://activemq.apache.org/per-destination-policies.html
                      -->
                          <!--
                      <policyEntry topic="FOO.&gt;">
                        <dispatchPolicy>
                          <roundRobinDispatchPolicy/>
                        </dispatchPolicy>
                        <subscriptionRecoveryPolicy>
                          <lastImageSubscriptionRecoveryPolicy/>
                        </subscriptionRecoveryPolicy>
                      </policyEntry>
                      <policyEntry advisoryForConsumed="true" tempTopic="true"/>
                      <policyEntry advisoryForConsumed="true" tempQueue="true"/>
                      -->
                       </policyEntries>
                    </policyMap>
                </destinationPolicy>
                <!--
                Typically, destinations are created automatically when they are used. Amazon MQ lets you create destinations when the broker is started.
                For more information, see http://activemq.apache.org/configure-startup-destinations.html
                -->
                <!--
                <destinations>
                  <queue physicalName="FOO.BAR"/>
                  <topic physicalName="SOME.TOPIC"/>
                </destinations>
                -->
                <!--
                You can control advanced ActiveMQ features using plugins.
                -->
                <plugins>
                  <!--
                  The Authorization plugin allows you to control the groups of users that are allowed to perform certain operations on your destinations.
                  For more information, see http://activemq.apache.org/security.html
                  -->
                  <!--
                  <authorizationPlugin>
                    <map>
                      <authorizationMap>
                        <authorizationEntries>
                          <authorizationEntry admin="guests,users" queue="GUEST.&gt;" read="guests" write="guests,users"/>
                          <authorizationEntry admin="guests,users" read="guests,users" topic="ActiveMQ.Advisory.&gt;" write="guests,users"/>
                        </authorizationEntries>
                        <tempDestinationAuthorizationEntry>
                          <tempDestinationAuthorizationEntry admin="tempDestinationAdmins" read="tempDestinationAdmins" write="tempDestinationAdmins"/>
                        </tempDestinationAuthorizationEntry>
                      </authorizationMap>
                    </map>
                  </authorizationPlugin>
                  -->
                  <!--
                  The Discarding DLQ plugin simplifies the configuration of your global dead-letter queue strategy.
                  You can take advantage of a more granular per-destination control by using destination policies.
                  For more information, see http://activemq.apache.org/message-redelivery-and-dlq-handling.html
                  -->
                  <!--
                  <discardingDLQBrokerPlugin dropAll="true" dropTemporaryQueues="true" dropTemporaryTopics="true"/>
                  -->
                  <!--
                  The Force Persistency Mode plugin can override the persistency mode set on messages.
                  -->
                  <!--
                  <forcePersistencyModeBrokerPlugin persistenceFlag="true"/>
                  -->
                  <!--
                  The Redelivery plugin extends the capabilities of destination policies with respect to message redelivery.
                  For more information, see http://activemq.apache.org/message-redelivery-and-dlq-handling.html
                  -->
                  <!--
                  <redeliveryPlugin fallbackToDeadLetter="true" sendToDlqIfMaxRetriesExceeded="true">
                    <redeliveryPolicyMap>
                      <redeliveryPolicyMap>
                        <redeliveryPolicyEntries>
                          <redeliveryPolicy maximumRedeliveries="4" queue="SpecialQueue" redeliveryDelay="10000"/>
                        </redeliveryPolicyEntries>
                        <defaultEntry>
                          <redeliveryPolicy initialRedeliveryDelay="5000" maximumRedeliveries="4" redeliveryDelay="10000"/>
                        </defaultEntry>
                      </redeliveryPolicyMap>
                    </redeliveryPolicyMap>
                  </redeliveryPlugin>
                  -->
                  <!--
                  The Statistics plugin lets you query broker or destination statistics by sending messages to the broker.
                  For more information, see http://activemq.apache.org/statisticsplugin.html
                  -->
                  <!--
                  <statisticsBrokerPlugin/>
                  -->
                  <!--
                  The Timestamping plugin lets the broker use server-side time instead of client-provided time for messages.
                  For more information, see http://activemq.apache.org/timestampplugin.html
                  -->
                  <!--
                  <timeStampingBrokerPlugin ttlCeiling="86400000" zeroExpirationOverride="86400000"/>
                  -->
                </plugins>
                <!--
                Network connectors let you connect brokers into networks of brokers.
                For more information, see Creating and Configuring an Amazon MQ Network of Brokers
                (https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/amazon-mq-creating-configuring-network-of-brokers.html)
                in the Amazon MQ Developer Guide and also Networks of Brokers
                (http://activemq.apache.org/networks-of-brokers.html) in the ActiveMQ documentation.
                -->
                <!--
                <networkConnectors>
                  <networkConnector name="myNetworkConnector" userName="commonUser" uri="masterslave:(ssl://b-1a2b3c4d-1.mq.region.amazonaws.com:61617,ssl://b-1a2b3c4d-2.mq.region.amazonaws.com:61617)"/>
                </networkConnectors>
                -->
                 <networkConnectors>
                    <networkConnector conduitSubscriptions="false"
                                      consumerTTL="1"
                                      messageTTL="-1"
                                      name="QueueConnector_ConnectingBroker_1_To_2"
                                      uri="masterslave:(
            - Fn::Select:
              - 0
              - Fn::GetAtt:
                - Broker2
                - OpenWireEndpoints
            - ','
            - Fn::Select:
              - 1
              - Fn::GetAtt:
                - Broker2
                - OpenWireEndpoints
            - |-
              )"
                       userName="
            - !Ref 'AmazonMQBrokerUser'
            - |-
              ">
                       <excludedDestinations>
                          <topic physicalName="&gt;"/>
                       </excludedDestinations>
                    </networkConnector>
                    <networkConnector conduitSubscriptions="true"
                                      consumerTTL="1"
                                      messageTTL="-1"
                                      name="TopicConnector_ConnectingBroker_1_To_2"
                                      uri="masterslave:(
            - Fn::Select:
              - 0
              - Fn::GetAtt:
                - Broker2
                - OpenWireEndpoints
            - ','
            - Fn::Select:
              - 1
              - Fn::GetAtt:
                - Broker2
                - OpenWireEndpoints
            - |-
              )"
                                      userName="
            - !Ref 'AmazonMQBrokerUser'
            - |-
              ">
                       <excludedDestinations>
                          <queue physicalName="&gt;"/>
                       </excludedDestinations>
                    </networkConnector>
                    <networkConnector conduitSubscriptions="false"
                                      consumerTTL="1"
                                      messageTTL="-1"
                                      name="QueueConnector_ConnectingBroker_1_To_3"
                                      uri="masterslave:(
            - Fn::Select:
              - 0
              - Fn::GetAtt:
                - Broker3
                - OpenWireEndpoints
            - ','
            - Fn::Select:
              - 1
              - Fn::GetAtt:
                - Broker3
                - OpenWireEndpoints
            - |-
              )"
                                      userName="
            - !Ref 'AmazonMQBrokerUser'
            - |-
              ">
                       <excludedDestinations>
                          <topic physicalName="&gt;"/>
                       </excludedDestinations>
                    </networkConnector>
                    <networkConnector conduitSubscriptions="true"
                                      consumerTTL="1"
                                      messageTTL="-1"
                                      name="TopicConnector_ConnectingBroker_1_To_3"
                                      uri="masterslave:(
            - Fn::Select:
              - 0
              - Fn::GetAtt:
                - Broker3
                - OpenWireEndpoints
            - ','
            - Fn::Select:
              - 1
              - Fn::GetAtt:
                - Broker3
                - OpenWireEndpoints
            - |-
              )"
                                      userName="
            - !Ref 'AmazonMQBrokerUser'
            - |
              ">
                       <excludedDestinations>
                          <queue physicalName="&gt;"/>
                       </excludedDestinations>
                    </networkConnector>
                 </networkConnectors>
                 <transportConnectors>
                    <transportConnector name="openwire" updateClusterClients="true" rebalanceClusterClients="true" updateClusterClientsOnRemove="true"/>
                 </transportConnectors>                 
              </broker>
      Description: Generated configuration to build a network of brokers.
      EngineType: ACTIVEMQ
      EngineVersion: 5.18
      Name: NoB1Configuration
    Type: AWS::AmazonMQ::Configuration
  Configuration2:
    Properties:
      Data:
        Fn::Base64:
          Fn::Join:
          - ''
          - - |-
              <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
              <broker xmlns="http://activemq.apache.org/schema/core"
                      schedulePeriodForDestinationPurge="10000"
                      start="false">
                <!--
                A configuration contains all of the settings for your ActiveMQ broker, in XML format (similar to ActiveMQ's activemq.xml file).
                You can create a configuration before creating any brokers. You can then apply the configuration to one or more brokers.

                You can use additional attributes for the broker element above. These attributes allow you to configure broker-wide settings.

                For more information, see Configuration and Amazon MQ Broker Configuration Parameters in the Amazon MQ Developer Guide:
                https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/amazon-mq-broker-configuration-parameters.html
                -->
                <!--
                Mirrored queues let you send a copy of each message to a topic with a similar name automatically.
                For more information, see http://activemq.apache.org/mirrored-queues.html

                Virtual destinations let you configure advanced routing of messages between destinations.
                For more information, see http://activemq.apache.org/virtual-destinations.html
                -->
                <!--
                <destinationInterceptors>
                  <mirroredQueue copyMessage="true" postfix=".qmirror" prefix=""/>
                  <virtualDestinationInterceptor>
                    <virtualDestinations>
                      <virtualTopic name="&gt;" prefix="VirtualTopicConsumers.*." selectorAware="false"/>
                      <compositeQueue name="MY.QUEUE">
                        <forwardTo>
                          <queue physicalName="FOO"/>
                          <topic physicalName="BAR"/>
                        </forwardTo>
                      </compositeQueue>
                    </virtualDestinations>
                  </virtualDestinationInterceptor>
                </destinationInterceptors>
                -->
                <!--
                By default, Amazon MQ optimizes for queues with fast consumers:
                Consumers are considered fast if they are able to keep up with the rate of messages generated by producers.
                Consumers are considered slow if a queue builds up a backlog of unacknowledged messages, potentially causing a decrease in producer throughput.
                To instruct Amazon MQ to optimize for queues with slow consumers, set the concurrentStoreAndDispatchQueues attribute to false.
                For more information, see https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/ensuring-effective-amazon-mq-performance.html
                -->
                <!--
                <persistenceAdapter>
                  <kahaDB  concurrentStoreAndDispatchQueues="false"/>
                </persistenceAdapter>
                -->
                <destinationPolicy>
                    <policyMap>
                       <policyEntries>
                      <!--
                      gcInactiveDestinations is used to automatically purge inactive destinations
                      preventing them from unnecessarily using broker resources.

                      An 'inactive' destination is one that has no messages pending and no consumers connected.

                      For more information, see: http://activemq.apache.org/delete-inactive-destinations.html
                      -->
                          <policyEntry gcInactiveDestinations="true"
                                       inactiveTimoutBeforeGC="600000"
                                       topic="&gt;">
                        <!--
                        The constantPendingMessageLimitStrategy is used to prevent
                        slow topic consumers to block producers and affect other consumers
                        by limiting the number of messages that are retained

                        For more information, see: http://activemq.apache.org/slow-consumer-handling.html
                        -->
                             <pendingMessageLimitStrategy>
                                <constantPendingMessageLimitStrategy limit="1000"/>
                             </pendingMessageLimitStrategy>
                          </policyEntry>
                          <policyEntry gcInactiveDestinations="true"
                                       inactiveTimoutBeforeGC="600000"
                                       queue="&gt;"/>
                          <!--
                      Destination policies let you configure a rich set of behaviors for your queues and topics.
                      For more information, see http://activemq.apache.org/per-destination-policies.html
                      -->
                          <!--
                      <policyEntry topic="FOO.&gt;">
                        <dispatchPolicy>
                          <roundRobinDispatchPolicy/>
                        </dispatchPolicy>
                        <subscriptionRecoveryPolicy>
                          <lastImageSubscriptionRecoveryPolicy/>
                        </subscriptionRecoveryPolicy>
                      </policyEntry>
                      <policyEntry advisoryForConsumed="true" tempTopic="true"/>
                      <policyEntry advisoryForConsumed="true" tempQueue="true"/>
                      -->
                       </policyEntries>
                    </policyMap>
                </destinationPolicy>
                <!--
                Typically, destinations are created automatically when they are used. Amazon MQ lets you create destinations when the broker is started.
                For more information, see http://activemq.apache.org/configure-startup-destinations.html
                -->
                <!--
                <destinations>
                  <queue physicalName="FOO.BAR"/>
                  <topic physicalName="SOME.TOPIC"/>
                </destinations>
                -->
                <!--
                You can control advanced ActiveMQ features using plugins.
                -->
                <plugins>
                  <!--
                  The Authorization plugin allows you to control the groups of users that are allowed to perform certain operations on your destinations.
                  For more information, see http://activemq.apache.org/security.html
                  -->
                  <!--
                  <authorizationPlugin>
                    <map>
                      <authorizationMap>
                        <authorizationEntries>
                          <authorizationEntry admin="guests,users" queue="GUEST.&gt;" read="guests" write="guests,users"/>
                          <authorizationEntry admin="guests,users" read="guests,users" topic="ActiveMQ.Advisory.&gt;" write="guests,users"/>
                        </authorizationEntries>
                        <tempDestinationAuthorizationEntry>
                          <tempDestinationAuthorizationEntry admin="tempDestinationAdmins" read="tempDestinationAdmins" write="tempDestinationAdmins"/>
                        </tempDestinationAuthorizationEntry>
                      </authorizationMap>
                    </map>
                  </authorizationPlugin>
                  -->
                  <!--
                  The Discarding DLQ plugin simplifies the configuration of your global dead-letter queue strategy.
                  You can take advantage of a more granular per-destination control by using destination policies.
                  For more information, see http://activemq.apache.org/message-redelivery-and-dlq-handling.html
                  -->
                  <!--
                  <discardingDLQBrokerPlugin dropAll="true" dropTemporaryQueues="true" dropTemporaryTopics="true"/>
                  -->
                  <!--
                  The Force Persistency Mode plugin can override the persistency mode set on messages.
                  -->
                  <!--
                  <forcePersistencyModeBrokerPlugin persistenceFlag="true"/>
                  -->
                  <!--
                  The Redelivery plugin extends the capabilities of destination policies with respect to message redelivery.
                  For more information, see http://activemq.apache.org/message-redelivery-and-dlq-handling.html
                  -->
                  <!--
                  <redeliveryPlugin fallbackToDeadLetter="true" sendToDlqIfMaxRetriesExceeded="true">
                    <redeliveryPolicyMap>
                      <redeliveryPolicyMap>
                        <redeliveryPolicyEntries>
                          <redeliveryPolicy maximumRedeliveries="4" queue="SpecialQueue" redeliveryDelay="10000"/>
                        </redeliveryPolicyEntries>
                        <defaultEntry>
                          <redeliveryPolicy initialRedeliveryDelay="5000" maximumRedeliveries="4" redeliveryDelay="10000"/>
                        </defaultEntry>
                      </redeliveryPolicyMap>
                    </redeliveryPolicyMap>
                  </redeliveryPlugin>
                  -->
                  <!--
                  The Statistics plugin lets you query broker or destination statistics by sending messages to the broker.
                  For more information, see http://activemq.apache.org/statisticsplugin.html
                  -->
                  <!--
                  <statisticsBrokerPlugin/>
                  -->
                  <!--
                  The Timestamping plugin lets the broker use server-side time instead of client-provided time for messages.
                  For more information, see http://activemq.apache.org/timestampplugin.html
                  -->
                  <!--
                  <timeStampingBrokerPlugin ttlCeiling="86400000" zeroExpirationOverride="86400000"/>
                  -->
                </plugins>
                <!--
                Network connectors let you connect brokers into networks of brokers.
                For more information, see Creating and Configuring an Amazon MQ Network of Brokers
                (https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/amazon-mq-creating-configuring-network-of-brokers.html)
                in the Amazon MQ Developer Guide and also Networks of Brokers
                (http://activemq.apache.org/networks-of-brokers.html) in the ActiveMQ documentation.
                -->
                <!--
                <networkConnectors>
                  <networkConnector name="myNetworkConnector" userName="commonUser" uri="masterslave:(ssl://b-1a2b3c4d-1.mq.region.amazonaws.com:61617,ssl://b-1a2b3c4d-2.mq.region.amazonaws.com:61617)"/>
                </networkConnectors>
                -->
                 <networkConnectors>
                    <networkConnector conduitSubscriptions="false"
                                      consumerTTL="1"
                                      messageTTL="-1"
                                      name="QueueConnector_ConnectingBroker_2_To_1"
                                      uri="masterslave:(
            - Fn::Select:
              - 0
              - Fn::GetAtt:
                - Broker1
                - OpenWireEndpoints
            - ','
            - Fn::Select:
              - 1
              - Fn::GetAtt:
                - Broker1
                - OpenWireEndpoints
            - |-
              )"
                                      userName="
            - !Ref 'AmazonMQBrokerUser'
            - |-
              ">
                       <excludedDestinations>
                          <topic physicalName="&gt;"/>
                       </excludedDestinations>
                    </networkConnector>
                    <networkConnector conduitSubscriptions="true"
                                      consumerTTL="1"
                                      messageTTL="-1"
                                      name="TopicConnector_ConnectingBroker_2_To_1"
                                      uri="masterslave:(
            - Fn::Select:
              - 0
              - Fn::GetAtt:
                - Broker1
                - OpenWireEndpoints
            - ','
            - Fn::Select:
              - 1
              - Fn::GetAtt:
                - Broker1
                - OpenWireEndpoints
            - |-
              )"
                                      userName="
            - !Ref 'AmazonMQBrokerUser'
            - |-
              ">
                       <excludedDestinations>
                          <queue physicalName="&gt;"/>
                       </excludedDestinations>
                    </networkConnector>
                    <networkConnector conduitSubscriptions="false"
                                      consumerTTL="1"
                                      messageTTL="-1"
                                      name="QueueConnector_ConnectingBroker_2_To_3"
                                      uri="masterslave:(
            - Fn::Select:
              - 0
              - Fn::GetAtt:
                - Broker3
                - OpenWireEndpoints
            - ','
            - Fn::Select:
              - 1
              - Fn::GetAtt:
                - Broker3
                - OpenWireEndpoints
            - |-
              )"
                                      userName="
            - !Ref 'AmazonMQBrokerUser'
            - |-
              ">
                       <excludedDestinations>
                          <topic physicalName="&gt;"/>
                       </excludedDestinations>
                    </networkConnector>
                    <networkConnector conduitSubscriptions="true"
                                      consumerTTL="1"
                                      messageTTL="-1"
                                      name="TopicConnector_ConnectingBroker_2_To_3"
                                      uri="masterslave:(
            - Fn::Select:
              - 0
              - Fn::GetAtt:
                - Broker3
                - OpenWireEndpoints
            - ','
            - Fn::Select:
              - 1
              - Fn::GetAtt:
                - Broker3
                - OpenWireEndpoints
            - |-
              )"
                                      userName="
            - !Ref 'AmazonMQBrokerUser'
            - |
              ">
                       <excludedDestinations>
                          <queue physicalName="&gt;"/>
                       </excludedDestinations>
                    </networkConnector>
                 </networkConnectors>
                 <transportConnectors>
                    <transportConnector name="openwire" updateClusterClients="true" rebalanceClusterClients="true" updateClusterClientsOnRemove="true"/>
                 </transportConnectors>
              </broker>
      Description: Generated configuration to build a network of brokers.
      EngineType: ACTIVEMQ
      EngineVersion: 5.18
      Name: NoB2Configuration
    Type: AWS::AmazonMQ::Configuration
  Configuration3:
    Properties:
      Data:
        Fn::Base64:
          Fn::Join:
          - ''
          - - |-
              <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
              <broker xmlns="http://activemq.apache.org/schema/core"
                      schedulePeriodForDestinationPurge="10000"
                      start="false">
                <!--
                A configuration contains all of the settings for your ActiveMQ broker, in XML format (similar to ActiveMQ's activemq.xml file).
                You can create a configuration before creating any brokers. You can then apply the configuration to one or more brokers.

                You can use additional attributes for the broker element above. These attributes allow you to configure broker-wide settings.

                For more information, see Configuration and Amazon MQ Broker Configuration Parameters in the Amazon MQ Developer Guide:
                https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/amazon-mq-broker-configuration-parameters.html
                -->
                <!--
                Mirrored queues let you send a copy of each message to a topic with a similar name automatically.
                For more information, see http://activemq.apache.org/mirrored-queues.html

                Virtual destinations let you configure advanced routing of messages between destinations.
                For more information, see http://activemq.apache.org/virtual-destinations.html
                -->
                <!--
                <destinationInterceptors>
                  <mirroredQueue copyMessage="true" postfix=".qmirror" prefix=""/>
                  <virtualDestinationInterceptor>
                    <virtualDestinations>
                      <virtualTopic name="&gt;" prefix="VirtualTopicConsumers.*." selectorAware="false"/>
                      <compositeQueue name="MY.QUEUE">
                        <forwardTo>
                          <queue physicalName="FOO"/>
                          <topic physicalName="BAR"/>
                        </forwardTo>
                      </compositeQueue>
                    </virtualDestinations>
                  </virtualDestinationInterceptor>
                </destinationInterceptors>
                -->
                <!--
                By default, Amazon MQ optimizes for queues with fast consumers:
                Consumers are considered fast if they are able to keep up with the rate of messages generated by producers.
                Consumers are considered slow if a queue builds up a backlog of unacknowledged messages, potentially causing a decrease in producer throughput.
                To instruct Amazon MQ to optimize for queues with slow consumers, set the concurrentStoreAndDispatchQueues attribute to false.
                For more information, see https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/ensuring-effective-amazon-mq-performance.html
                -->
                <!--
                <persistenceAdapter>
                  <kahaDB  concurrentStoreAndDispatchQueues="false"/>
                </persistenceAdapter>
                -->
                <destinationPolicy>
                    <policyMap>
                       <policyEntries>
                      <!--
                      gcInactiveDestinations is used to automatically purge inactive destinations
                      preventing them from unnecessarily using broker resources.

                      An 'inactive' destination is one that has no messages pending and no consumers connected.

                      For more information, see: http://activemq.apache.org/delete-inactive-destinations.html
                      -->
                          <policyEntry gcInactiveDestinations="true"
                                       inactiveTimoutBeforeGC="600000"
                                       topic="&gt;">
                        <!--
                        The constantPendingMessageLimitStrategy is used to prevent
                        slow topic consumers to block producers and affect other consumers
                        by limiting the number of messages that are retained

                        For more information, see: http://activemq.apache.org/slow-consumer-handling.html
                        -->
                             <pendingMessageLimitStrategy>
                                <constantPendingMessageLimitStrategy limit="1000"/>
                             </pendingMessageLimitStrategy>
                          </policyEntry>
                          <policyEntry gcInactiveDestinations="true"
                                       inactiveTimoutBeforeGC="600000"
                                       queue="&gt;"/>
                          <!--
                      Destination policies let you configure a rich set of behaviors for your queues and topics.
                      For more information, see http://activemq.apache.org/per-destination-policies.html
                      -->
                          <!--
                      <policyEntry topic="FOO.&gt;">
                        <dispatchPolicy>
                          <roundRobinDispatchPolicy/>
                        </dispatchPolicy>
                        <subscriptionRecoveryPolicy>
                          <lastImageSubscriptionRecoveryPolicy/>
                        </subscriptionRecoveryPolicy>
                      </policyEntry>
                      <policyEntry advisoryForConsumed="true" tempTopic="true"/>
                      <policyEntry advisoryForConsumed="true" tempQueue="true"/>
                      -->
                       </policyEntries>
                    </policyMap>
                </destinationPolicy>
                <!--
                Typically, destinations are created automatically when they are used. Amazon MQ lets you create destinations when the broker is started.
                For more information, see http://activemq.apache.org/configure-startup-destinations.html
                -->
                <!--
                <destinations>
                  <queue physicalName="FOO.BAR"/>
                  <topic physicalName="SOME.TOPIC"/>
                </destinations>
                -->
                <!--
                You can control advanced ActiveMQ features using plugins.
                -->
                <plugins>
                  <!--
                  The Authorization plugin allows you to control the groups of users that are allowed to perform certain operations on your destinations.
                  For more information, see http://activemq.apache.org/security.html
                  -->
                  <!--
                  <authorizationPlugin>
                    <map>
                      <authorizationMap>
                        <authorizationEntries>
                          <authorizationEntry admin="guests,users" queue="GUEST.&gt;" read="guests" write="guests,users"/>
                          <authorizationEntry admin="guests,users" read="guests,users" topic="ActiveMQ.Advisory.&gt;" write="guests,users"/>
                        </authorizationEntries>
                        <tempDestinationAuthorizationEntry>
                          <tempDestinationAuthorizationEntry admin="tempDestinationAdmins" read="tempDestinationAdmins" write="tempDestinationAdmins"/>
                        </tempDestinationAuthorizationEntry>
                      </authorizationMap>
                    </map>
                  </authorizationPlugin>
                  -->
                  <!--
                  The Discarding DLQ plugin simplifies the configuration of your global dead-letter queue strategy.
                  You can take advantage of a more granular per-destination control by using destination policies.
                  For more information, see http://activemq.apache.org/message-redelivery-and-dlq-handling.html
                  -->
                  <!--
                  <discardingDLQBrokerPlugin dropAll="true" dropTemporaryQueues="true" dropTemporaryTopics="true"/>
                  -->
                  <!--
                  The Force Persistency Mode plugin can override the persistency mode set on messages.
                  -->
                  <!--
                  <forcePersistencyModeBrokerPlugin persistenceFlag="true"/>
                  -->
                  <!--
                  The Redelivery plugin extends the capabilities of destination policies with respect to message redelivery.
                  For more information, see http://activemq.apache.org/message-redelivery-and-dlq-handling.html
                  -->
                  <!--
                  <redeliveryPlugin fallbackToDeadLetter="true" sendToDlqIfMaxRetriesExceeded="true">
                    <redeliveryPolicyMap>
                      <redeliveryPolicyMap>
                        <redeliveryPolicyEntries>
                          <redeliveryPolicy maximumRedeliveries="4" queue="SpecialQueue" redeliveryDelay="10000"/>
                        </redeliveryPolicyEntries>
                        <defaultEntry>
                          <redeliveryPolicy initialRedeliveryDelay="5000" maximumRedeliveries="4" redeliveryDelay="10000"/>
                        </defaultEntry>
                      </redeliveryPolicyMap>
                    </redeliveryPolicyMap>
                  </redeliveryPlugin>
                  -->
                  <!--
                  The Statistics plugin lets you query broker or destination statistics by sending messages to the broker.
                  For more information, see http://activemq.apache.org/statisticsplugin.html
                  -->
                  <!--
                  <statisticsBrokerPlugin/>
                  -->
                  <!--
                  The Timestamping plugin lets the broker use server-side time instead of client-provided time for messages.
                  For more information, see http://activemq.apache.org/timestampplugin.html
                  -->
                  <!--
                  <timeStampingBrokerPlugin ttlCeiling="86400000" zeroExpirationOverride="86400000"/>
                  -->
                </plugins>
                <!--
                Network connectors let you connect brokers into networks of brokers.
                For more information, see Creating and Configuring an Amazon MQ Network of Brokers
                (https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/amazon-mq-creating-configuring-network-of-brokers.html)
                in the Amazon MQ Developer Guide and also Networks of Brokers
                (http://activemq.apache.org/networks-of-brokers.html) in the ActiveMQ documentation.
                -->
                <!--
                <networkConnectors>
                  <networkConnector name="myNetworkConnector" userName="commonUser" uri="masterslave:(ssl://b-1a2b3c4d-1.mq.region.amazonaws.com:61617,ssl://b-1a2b3c4d-2.mq.region.amazonaws.com:61617)"/>
                </networkConnectors>
                -->
                 <networkConnectors>
                    <networkConnector conduitSubscriptions="false"
                                      consumerTTL="1"
                                      messageTTL="-1"
                                      name="QueueConnector_ConnectingBroker_3_To_1"
                                      uri="masterslave:(
            - Fn::Select:
              - 0
              - Fn::GetAtt:
                - Broker1
                - OpenWireEndpoints
            - ','
            - Fn::Select:
              - 1
              - Fn::GetAtt:
                - Broker1
                - OpenWireEndpoints
            - |-
              )"
                                      userName="
            - !Ref 'AmazonMQBrokerUser'
            - |-
              ">
                       <excludedDestinations>
                          <topic physicalName="&gt;"/>
                       </excludedDestinations>
                    </networkConnector>
                    <networkConnector conduitSubscriptions="true"
                                      consumerTTL="1"
                                      messageTTL="-1"
                                      name="TopicConnector_ConnectingBroker_3_To_1"
                                      uri="masterslave:(
            - Fn::Select:
              - 0
              - Fn::GetAtt:
                - Broker1
                - OpenWireEndpoints
            - ','
            - Fn::Select:
              - 1
              - Fn::GetAtt:
                - Broker1
                - OpenWireEndpoints
            - |-
              )"
                                      userName="
            - !Ref 'AmazonMQBrokerUser'
            - |-
              ">
                       <excludedDestinations>
                          <queue physicalName="&gt;"/>
                       </excludedDestinations>
                    </networkConnector>
                    <networkConnector conduitSubscriptions="false"
                                      consumerTTL="1"
                                      messageTTL="-1"
                                      name="QueueConnector_ConnectingBroker_3_To_2"
                                      uri="masterslave:(
            - Fn::Select:
              - 0
              - Fn::GetAtt:
                - Broker2
                - OpenWireEndpoints
            - ','
            - Fn::Select:
              - 1
              - Fn::GetAtt:
                - Broker2
                - OpenWireEndpoints
            - |-
              )"
                                      userName="
            - !Ref 'AmazonMQBrokerUser'
            - |-
              ">
                       <excludedDestinations>
                          <topic physicalName="&gt;"/>
                       </excludedDestinations>
                    </networkConnector>
                    <networkConnector conduitSubscriptions="true"
                                      consumerTTL="1"
                                      messageTTL="-1"
                                      name="TopicConnector_ConnectingBroker_3_To_2"
                                      uri="masterslave:(
            - Fn::Select:
              - 0
              - Fn::GetAtt:
                - Broker2
                - OpenWireEndpoints
            - ','
            - Fn::Select:
              - 1
              - Fn::GetAtt:
                - Broker2
                - OpenWireEndpoints
            - |-
              )"
                                      userName="
            - !Ref 'AmazonMQBrokerUser'
            - |
              ">
                       <excludedDestinations>
                          <queue physicalName="&gt;"/>
                       </excludedDestinations>
                    </networkConnector>
                 </networkConnectors>
                 <transportConnectors>
                    <transportConnector name="openwire" updateClusterClients="true" rebalanceClusterClients="true" updateClusterClientsOnRemove="true"/>
                 </transportConnectors>                 
              </broker>
      Description: Generated configuration to build a network of brokers.
      EngineType: ACTIVEMQ
      EngineVersion: 5.18
      Name: NoB3Configuration
    Type: AWS::AmazonMQ::Configuration

  ConfigurationAssociation1:
    Properties:
      Broker:
        Ref: Broker1
      Configuration:
        Id:
          Ref: Configuration1
        Revision:
          Fn::GetAtt:
          - Configuration1
          - Revision
    Type: AWS::AmazonMQ::ConfigurationAssociation

  ConfigurationAssociation2:
    Properties:
      Broker:
        Ref: Broker2
      Configuration:
        Id:
          Ref: Configuration2
        Revision:
          Fn::GetAtt:
          - Configuration2
          - Revision
    Type: AWS::AmazonMQ::ConfigurationAssociation

  ConfigurationAssociation3:
    Properties:
      Broker:
        Ref: Broker3
      Configuration:
        Id:
          Ref: Configuration3
        Revision:
          Fn::GetAtt:
          - Configuration3
          - Revision
    Type: AWS::AmazonMQ::ConfigurationAssociation

  MQBrokerUserPassword:
    Type: AWS::SSM::Parameter
    Properties:
      Name: MQBrokerUserPassword
      Type: String
      Value: !Join
        - ','
        - - !Ref 'AmazonMQBrokerUser'
          - !Ref 'AmazonMQBrokerPassword'
      Description: SSM Param for broker user and password
 
  MQBrokerUserPasswordSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: MQBrokerUserPasswordSecret
      Description: "Secret for accessing a queue on the ActiveMQ broker."
      SecretString: !Join
        - ''
        - - '{'
          - '"username"'
          - ':'
          - !Ref 'AmazonMQBrokerUser'
          - ','
          - '"password"'
          - ':'
          - !Ref 'AmazonMQBrokerPassword'
          - '}' 
 
  C9MQClient:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      AutomaticStopTimeMinutes: 30
      Description: MQ Client Workspace
      InstanceType: m4.large
      ImageId: amazonlinux-2-x86_64
      Name:
        Fn::Join:
        - ''
        - - Ref: AWS::StackName
          - MQClient
      Repositories:
        - PathComponent: /amazon-mq-workshop
          RepositoryUrl: https://github.com/aws-samples/amazon-mq-workshop.git
      SubnetId: !Ref 'PublicSubnet1'
      OwnerArn: !Ref "AWS::NoValue"
  MQBuildRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMPatchAssociation
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      MaxSessionDuration: 3600
      RoleName: MQBuildRole
      Description: Allows EC2 instances to call AWS services on your behalf.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
  MQBuildRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref MQBuildRole
  EC2MQBuildInstance:
    Type: AWS::EC2::Instance
    Properties:
      Tenancy: default
      UserData: IyEvYmluL2Jhc2gKeXVtIGluc3RhbGwgZ2l0IC15Cnl1bSBpbnN0YWxsIG1ha2UgLXkKeXVtIGluc3RhbGwgZG9ja2VyIC15Cnl1bSBpbnN0YWxsIGFtYXpvbi1lY3ItY3JlZGVudGlhbC1oZWxwZXIgLXkKeXVtIGluc3RhbGwgbWF2ZW4gLXkKZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9pYm0tbWVzc2FnaW5nL21xLWNvbnRhaW5lci5naXQKY2QgbXEtY29udGFpbmVyCmdpdCBjaGVja291dCA2YmIxN2E1OTI4M2IxY2NiZDIxNDk1ZjEzZWIyN2Q1ZTM3MTU4OTRiCnN1ZG8gc2VydmljZSBkb2NrZXIgc3RhcnQKc3VkbyBtYWtlIGJ1aWxkLWRldnNlcnZlcgphd3MgY29uZmlndXJlIHNldCBkZWZhdWx0LnJlZ2lvbiB1cy1lYXN0LTEKcmVnaW9uPSQoYXdzIGNvbmZpZ3VyZSBnZXQgcmVnaW9uKQphY2NvdW50aWQ9JChhd3Mgc3RzIGdldC1jYWxsZXItaWRlbnRpdHkgLS1xdWVyeSBBY2NvdW50IC0tb3V0cHV0IHRleHQpCmF3cyBlY3IgZ2V0LWxvZ2luLXBhc3N3b3JkIC0tcmVnaW9uICRyZWdpb24gfCBzdWRvIGRvY2tlciBsb2dpbiAtLXVzZXJuYW1lIEFXUyAtLXBhc3N3b3JkLXN0ZGluICRhY2NvdW50aWQuZGtyLmVjci4kcmVnaW9uLmFtYXpvbmF3cy5jb20KYXdzIGVjciBjcmVhdGUtcmVwb3NpdG9yeSAtLXJlcG9zaXRvcnktbmFtZSBhbWF6b24tbXEtbWlncmF0aW9uLWZyb20taWJtLW1xL21xYWR2YW5jZWQtc2VydmVyLWRldgphd3MgZWNyIGNyZWF0ZS1yZXBvc2l0b3J5IC0tcmVwb3NpdG9yeS1uYW1lIGFtYXpvbi1tcS1taWdyYXRpb24tZnJvbS1pYm0tbXEvc2FtcGxlLXdpdGgtYXdzLXNzbQphd3MgZWNyIGNyZWF0ZS1yZXBvc2l0b3J5IC0tcmVwb3NpdG9yeS1uYW1lIGFtYXpvbi1tcS1taWdyYXRpb24tZnJvbS1pYm0tbXEvbG9hZC1nZW5lcmF0b3IKc3VkbyBkb2NrZXIgdGFnIGlibS1tcWFkdmFuY2VkLXNlcnZlci1kZXY6OS40LjAuMC1hbWQ2NCAkYWNjb3VudGlkLmRrci5lY3IuJHJlZ2lvbi5hbWF6b25hd3MuY29tL2FtYXpvbi1tcS1taWdyYXRpb24tZnJvbS1pYm0tbXEvbXFhZHZhbmNlZC1zZXJ2ZXItZGV2OjkuNC4wLjAKc3VkbyBkb2NrZXIgcHVzaCAkYWNjb3VudGlkLmRrci5lY3IuJHJlZ2lvbi5hbWF6b25hd3MuY29tL2FtYXpvbi1tcS1taWdyYXRpb24tZnJvbS1pYm0tbXEvbXFhZHZhbmNlZC1zZXJ2ZXItZGV2OjkuNC4wLjAKc3VkbyBkb2NrZXIgdGFnIGlibS1tcWFkdmFuY2VkLXNlcnZlci1kZXY6OS40LjAuMC1hbWQ2NCAkYWNjb3VudGlkLmRrci5lY3IuJHJlZ2lvbi5hbWF6b25hd3MuY29tL2FtYXpvbi1tcS1taWdyYXRpb24tZnJvbS1pYm0tbXEvbXFhZHZhbmNlZC1zZXJ2ZXItZGV2OmxhdGVzdApzdWRvIGRvY2tlciBwdXNoICRhY2NvdW50aWQuZGtyLmVjci4kcmVnaW9uLmFtYXpvbmF3cy5jb20vYW1hem9uLW1xLW1pZ3JhdGlvbi1mcm9tLWlibS1tcS9tcWFkdmFuY2VkLXNlcnZlci1kZXY6bGF0ZXN0CmdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vYXdzLXNhbXBsZXMvYW1hem9uLW1xLW1pZ3JhdGlvbi1mcm9tLWlibS1tcS5naXQKY2QgYW1hem9uLW1xLW1pZ3JhdGlvbi1mcm9tLWlibS1tcS9zYW1wbGUtd2l0aC1hd3Mtc3NtCnNlZCAtaSAncy8ke2F3cy1hY2NvdW50LWlkfS9hd3NhY2NvdW50aWQvZycgcG9tLnhtbApzZWQgLWkgInMvYXdzYWNjb3VudGlkLyRhY2NvdW50aWQvZyIgcG9tLnhtbApzZWQgLWkgJ3MvJHthd3MtcmVnaW9ufS9hd3NyZWdpb24vZycgcG9tLnhtbApzZWQgLWkgInMvYXdzcmVnaW9uLyRyZWdpb24vZyIgcG9tLnhtbAptdm4gY2xlYW4gZGVwbG95CmF3cyBzc20gcHV0LXBhcmFtZXRlciAtLXR5cGUgU2VjdXJlU3RyaW5nIC0tbmFtZSAnL0RFVi9KTVMtQlJJREdFL0FNQVpPTk1RL1BBU1NXT1JEJyAtLXZhbHVlICd3b3Jrc2hvcFVzZXInCmF3cyBzc20gcHV0LXBhcmFtZXRlciAtLXR5cGUgU2VjdXJlU3RyaW5nIC0tbmFtZSAnL0RFVi9KTVMtQlJJREdFL0lCTU1RL1BBU1NXT1JEJyAtLXZhbHVlICdwYXNzdzByZCcKY2QgLi4vbG9hZC1nZW5lcmF0b3IKc2VkIC1pICdzLyR7YXdzLWFjY291bnQtaWR9L2F3c2FjY291bnRpZC9nJyBwb20ueG1sCnNlZCAtaSAicy9hd3NhY2NvdW50aWQvJGFjY291bnRpZC9nIiBwb20ueG1sCnNlZCAtaSAncy8ke2F3cy1yZWdpb259L2F3c3JlZ2lvbi9nJyBwb20ueG1sCnNlZCAtaSAicy9hd3NyZWdpb24vJHJlZ2lvbi9nIiBwb20ueG1sCm12biBjbGVhbiBkZXBsb3k=
      BlockDeviceMappings:
        - Ebs:
            VolumeType: gp3
            Iops: 3000
            VolumeSize: 16
            Encrypted: false
            DeleteOnTermination: true
          DeviceName: /dev/xvda
      IamInstanceProfile: !Ref MQBuildRoleInstanceProfile
      EbsOptimized: false
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'  
      ImageId: ami-06b21ccaeff8cd686
      InstanceType: t2.medium
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  IBMMQECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ibm-mq-cluster

  IBMMQECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: EC2MQBuildInstance
    Properties:
      Family: ibm-mq-broker-task
      Cpu: 2048
      Memory: 4096
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: mqadvanced-server-dev
          Cpu: 2048
          Memory: 4096
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/amazon-mq-migration-from-ibm-mq/mqadvanced-server-dev:latest'
          PortMappings:
            - ContainerPort: 1414
            - ContainerPort: 9443
          Environment:
            - Name: LICENSE
              Value: accept
            - Name: MQ_QMGR_NAME
              Value: !Ref IBMMQBrokerQueueManager
            - Name: MQ_ADMIN_PASSWORD
              Value: !Ref IBMMQBrokerPassword
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ibm-mq-broker-task

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: cmr/ecs/ibm-mq-cluster
      RetentionInDays: 30

  IBMMQECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: ibm-mq-broker-service
      Cluster: !Ref IBMMQECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref IBMMQSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      TaskDefinition: !Ref IBMMQECSTaskDefinition
Outputs:
  ECSTaskExecutionRole:
    Description: The ARN of the ECS Task Execution Role.
    Value: !Ref ECSTaskExecutionRole
    Export:
      Name: !Sub '${Stage}:JMS-BRIDGE:ECSTaskExecutionRole'
  ECSTaskRole:
    Description: The ARN of the ECS Task Role.
    Value: !Ref ECSTaskRole
    Export:
      Name: !Sub '${Stage}:JMS-BRIDGE:ECSTaskRole'
  ServiceAutoScalingRole:
    Description: The ARN of the Service Auto Scaling Role.
    Value: !GetAtt ServiceAutoScalingRole.Arn
    Export:
      Name: !Sub '${Stage}:JMS-BRIDGE:ServiceAutoScalingRole'
  VPCRef:
    Description: The reference to the created VPC.
    Value: !Ref VPC
    Export:
      Name: !Sub '${Stage}:JMS-BRIDGE:VPC'
  PublicSubnet1Ref:
    Description: The reference to the created public subnet 1.
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${Stage}:JMS-BRIDGE:PublicSubnet1'

  PublicSubnet2Ref:
    Description: The reference to the created public subnet 2.
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${Stage}:JMS-BRIDGE:PublicSubnet2'

  AmazonMQBrokerUserNameRef:
    Description: The reference to the Amazon MQ broker user name.
    Value: !Ref AmazonMQBrokerUser
    Export:
      Name: !Sub '${Stage}:JMS-BRIDGE:AmazonMQBrokerUserName'

  AmazonMQBrokerPasswordRef:
    Description: The reference to the Amazon MQ broker user password.
    Value: !Ref AmazonMQBrokerPassword
    Export:
      Name: !Sub '${Stage}:JMS-BRIDGE:AmazonMQBrokerPassword'

  AmazonMQBrokerURLRef:
    Description: The reference to the Amazon MQ broker OpenWire URL.
    Value: !Sub 'failover:(ssl://${AmazonMQBrokerMigration}-1.mq.${AWS::Region}.amazonaws.com:61617)'
    Export:
      Name: !Sub '${Stage}:JMS-BRIDGE:AmazonMQBrokerURL'
      
  IBMMQBrokerUserNameRef:
    Description: The reference to the IBM MQ broker application user name.
    Value: 'admin'
    Export:
      Name: !Sub '${Stage}:JMS-BRIDGE:IBMMQBrokerUserName'

  IBMMQBrokerPasswordRef:
    Description: The reference to the IBM MQ broker application user password.
    Value: !Ref IBMMQBrokerPassword
    Export:
      Name: !Sub '${Stage}:JMS-BRIDGE:IBMMQBrokerPassword'

  IBMMQBrokerQueueManagerRef:
    Description: The reference to the IBM MQ broker queue manager.
    Value: !Ref IBMMQBrokerQueueManager
    Export:
      Name: !Sub '${Stage}:JMS-BRIDGE:IBMMQBrokerQueueManager'

  IBMMQBrokerChannelRef:
    Description: The reference to the IBM MQ broker channel.
    Value: 'DEV.ADMIN.SVRCONN'
    Export:
      Name: !Sub '${Stage}:JMS-BRIDGE:IBMMQBrokerChannel'