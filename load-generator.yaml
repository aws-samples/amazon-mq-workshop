AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy the load generator service on AWS Fargate.

Parameters:
  Stage:
    Type: String
    Default: DEV
    Description: The stage into we deploy this template.

  IBMMQBrokerHost:
    Type: String
    Description: The host name or public IP address of the IBM MQ broker.

Resources:
  LoadGeneratorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Limits security group ingress and egress traffic for the JMS bridge instance
      VpcId: {'Fn::ImportValue': !Sub '${Stage}:JMS-BRIDGE:VPC'}
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}:LoadGeneratorSecurityGroup'

  LoadGeneratorECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: load-generator-cluster

  LoadGeneratorECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: load-generator-task
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: {'Fn::ImportValue': !Sub '${Stage}:JMS-BRIDGE:ECSTaskExecutionRole'}
      ContainerDefinitions:
        - Name: load-generator-task
          Cpu: 256
          Memory: 512
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/amazon-mq-migration-from-ibm-mq/load-generator:latest'
          Environment:
            - Name: amazonMQ.brokerURL
              Value: {'Fn::ImportValue': !Sub '${Stage}:JMS-BRIDGE:AmazonMQBrokerURL'}
            - Name: amazonMQ.userName
              Value: {'Fn::ImportValue': !Sub '${Stage}:JMS-BRIDGE:AmazonMQBrokerUserName'}
            - Name: amazonMQ.password
              Value: {'Fn::ImportValue': !Sub '${Stage}:JMS-BRIDGE:AmazonMQBrokerPassword'}
            - Name: websphereMQ.hostName
              Value: !Ref IBMMQBrokerHost
            - Name: websphereMQ.queueManager
              Value: {'Fn::ImportValue': !Sub '${Stage}:JMS-BRIDGE:IBMMQBrokerQueueManager'}
            - Name: websphereMQ.channel
              Value: {'Fn::ImportValue': !Sub '${Stage}:JMS-BRIDGE:IBMMQBrokerChannel'}
            - Name: websphereMQ.userName
              Value: {'Fn::ImportValue': !Sub '${Stage}:JMS-BRIDGE:IBMMQBrokerUserName'}
            - Name: websphereMQ.password
              Value: {'Fn::ImportValue': !Sub '${Stage}:JMS-BRIDGE:IBMMQBrokerPassword'}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: load-generator

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: cmr/ecs/load-generator-cluster
      RetentionInDays: 30

  LoadGeneratorECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: load-generator-service
      Cluster: !Ref LoadGeneratorECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED # to be able to download images from ECR
          SecurityGroups:
            - !Ref LoadGeneratorSecurityGroup
          Subnets:
            - {'Fn::ImportValue': !Sub '${Stage}:JMS-BRIDGE:PublicSubnet1'}
            - {'Fn::ImportValue': !Sub '${Stage}:JMS-BRIDGE:PublicSubnet2'}
      TaskDefinition: !Ref LoadGeneratorECSTaskDefinition

Outputs:
  LoadGeneratorECSClusterRef:
    Description: The name of the load generator ECS cluster
    Value: !Ref LoadGeneratorECSCluster